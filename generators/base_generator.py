from abc import ABC, abstractmethod
import random
import string

class BaseGenerator(ABC):
    """Abstract base class for all reverse shell generators"""
    
    def __init__(self):
        self.encoder = None
        self.obfuscator = None
    
    @abstractmethod
    def generate(self, ip: str, port: int, **kwargs) -> str:
        """
        Generate reverse shell payload
        
        Args:
            ip (str): Attacker IP address
            port (int): Attacker port
            **kwargs: Additional generator-specific options
            
        Returns:
            str: Generated payload code
        """
        pass
    
    def random_string(self, length=8):
        """Generate random string for variable/function names"""
        return ''.join(random.choice(string.ascii_letters) for _ in range(length))
    
    def add_comments(self, code: str, language: str) -> str:
        """Add random comments to the generated code"""
        comment_symbols = {
            'python': '#',
            'powershell': '#',
            'bash': '#',
            'csharp': '//',
            'java': '//',
            'go': '//'
        }
        symbol = comment_symbols.get(language, '//')
        comment = f"{symbol} Generated by 0xD4 Team - Reverse Shell Generator\n"
        comment += f"{symbol} {self.random_string(32)}\n"
        return comment + code